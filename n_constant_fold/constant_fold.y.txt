%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int isConstant;
    int value;
    char code[100];
} Expr;
%}

%union {
    int num;
    char* id;
    Expr expr;
}

%token <num> NUMBER
%token <id> ID
%type <expr> expr
%type <expr> stmt

%%

program:
    program stmt
    |
    ;

stmt:
    ID '=' expr ';' {
        printf("%s = %s\n", $1, $3.code);
    }
    ;

expr:
    expr '+' expr {
        Expr e;
        if ($1.isConstant && $3.isConstant) {
            e.value = $1.value + $3.value;
            e.isConstant = 1;
            sprintf(e.code, "%d", e.value);  // Constant Folding
        } else {
            sprintf(e.code, "%s + %s", $1.code, $3.code);
            e.isConstant = 0;
        }
        $$ = e;
    }
    | expr '-' expr {
        Expr e;
        if ($1.isConstant && $3.isConstant) {
            e.value = $1.value - $3.value;
            e.isConstant = 1;
            sprintf(e.code, "%d", e.value);  // Constant Folding
        } else {
            sprintf(e.code, "%s - %s", $1.code, $3.code);
            e.isConstant = 0;
        }
        $$ = e;
    }
    | expr '*' expr {
        Expr e;
        if ($1.isConstant && $3.isConstant) {
            e.value = $1.value * $3.value;
            e.isConstant = 1;
            sprintf(e.code, "%d", e.value);  // Constant Folding
        } else {
            sprintf(e.code, "%s * %s", $1.code, $3.code);
            e.isConstant = 0;
        }
        $$ = e;
    }
    | expr '/' expr {
        Expr e;
        if ($1.isConstant && $3.isConstant && $3.value != 0) {
            e.value = $1.value / $3.value;
            e.isConstant = 1;
            sprintf(e.code, "%d", e.value);  // Constant Folding
        } else {
            sprintf(e.code, "%s / %s", $1.code, $3.code);
            e.isConstant = 0;
        }
        $$ = e;
    }
    | '(' expr ')' {
        $$ = $2;
    }
    | NUMBER {
        Expr e;
        e.isConstant = 1;
        e.value = $1;
        sprintf(e.code, "%d", $1);
        $$ = e;
    }
    | ID {
        Expr e;
        e.isConstant = 0;
        strcpy(e.code, $1);
        $$ = e;
    }
    ;

%%

int main() {
    yyparse();
    return 0;
}

int yyerror(char *s) {
    printf("Error: %s\n", s);
    return 0;
}
